{"meta":{"title":"阿珂","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Vim-note-03","slug":"vim-note-03","date":"2022-05-12T07:14:28.000Z","updated":"2022-05-12T15:05:41.787Z","comments":true,"path":"2022/05/12/vim-note-03/","link":"","permalink":"http://example.com/2022/05/12/vim-note-03/","excerpt":"","text":"第3章 打开和搜索文件如何在Vim中快速搜索？ 不依赖插件搜索 使用fzf插件搜索 打开和编辑文件要在Vim中打开一个文件，可以使用:edit 1:edit file.txt 如果文件存在，就会打开，如果不存在就会创建一个新的buffer名为file.txt。 :edit支持Tab补全、通配符及递归搜索，也可以指定目录，列出目录所有文件。 使用find命令搜索文件可以使用:find命令搜索文件，比如： 12:find file.txt:find app/controllers/users_controller.rb :find命令也支持命令补全。 Find和Path两者的区别在于，:find命令根据path选项配置的路径查找文件，而:edit不会。 1:set path? 默认情况下，您的path内容很可能是这样的： 1path=.,/usr/include,, . 意思是在当前文件所在目录下搜索。(译者注：注意不是命令行输入pwd返回的当前目录，而是 当前所打开的文件 所在的目录) , means to search in the current directory.(译者注：此处貌似作者有点小错误，逗号,应该是表示路径之间的分割符。连续的两个,,（两个逗号之间为空）才表示当前目录) /usr/include 表示在C编译器头文件目录下搜索，可以忽略不设置。 可以将set path+=&#123;您需要添加的目录&#125;添加到您的vimrc文件中，这样find就能搜索设置的目录。 使用grep命令在文件中搜索","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"}]},{"title":"Vim-note-02","slug":"vim-note-02","date":"2022-05-10T06:17:08.000Z","updated":"2022-05-12T07:01:55.081Z","comments":true,"path":"2022/05/10/vim-note-02/","link":"","permalink":"http://example.com/2022/05/10/vim-note-02/","excerpt":"","text":"第2章 缓冲区（Buffers），窗口（Windows）和选项卡（Tabs）Buffers buffer是一个内存中的一个空间，每当vim打开一个文件，该文件的数据就与一个buffer绑定，即，当您在vim中打开3个文件，就有3个buffers 在~/.vimrc中添加set hidden 保存，然后激活它(在vimrc文件中运行:source %)，可以在当前buffer未保存时切换到另一个buffer，否则会提示保存错误E37: No write since last change (add ! to override) 切换buffer有几种方法： :bnext 切换至下一个buffer（:bprevious切换至前一个buffer），可用缩写:bn :buffer + 文件名。（按下&lt;Tab&gt;键Vim会自动补全文件名）。 :buffer + n, n是buffer的编号。比如，输入:buffer 2将使您切换到buffer #2。 按下Ctrl-O将跳转至跳转列表中旧的位置，对应的，按下Ctrl-I将跳转至跳转列表中新的位置。这并不是属于buffer的特有方法，但它可以用来在不同的buffers中跳转。我将在第5章详细讲述关于跳转的知识。 按下Ctrl-^跳转至先前编辑过的buffer。 删除buffer可以输入:bdelete。这条命令也可以接收一个buffer编号（:bdelete 3将删除buffer #3）或一个文件名（:bdelete然后按&lt;Tab&gt;自动补全文件名），感觉没什么用，使用Ctrl-i/o仍然可以切换出来。 退出Vim如果有多个buffer，可以使用:qall、:qall!、:wqall，这跟:wq一样很好理解，测试all可以缩写成a Windows窗口、视图，及我们看到的vim界面。 在vim编辑界面，使用:split filename 或者 :vsplit filename 、:new filename可以在当前页面分割窗口，同时显示多个buffer。这个最终的显示效果跟同时打开多个窗口是一样的。 12vim -o2 txt1 txt2 #水平分割vim -O3 txt1 txt2 txt3 #垂直分割 在分割的窗口之间切换编辑，可以使用Ctrl-W 前缀键，再按hjkl切换左上下右。 在vim编辑界面，也可以直接创建新窗口： 1234Ctrl-W V 打开一个新的垂直分割的窗口Ctrl-W S 打开一个新的水平分割的窗口Ctrl-W C 关闭一个窗口Ctrl-W O 除了当前窗口，关闭所有其他的窗口 TabsTabs是windows的集合，就像窗口的布局，可以看成是浏览器的多标签（多个页面）。 在vim编辑界面，也可以直接创建新Tabs： 1234:tabnew file.txt #在tab中打开一个文件:tabclose #关闭当前tabgt #切换至下一个tabgT #切换至上一个tab 也可以直接打开多Tabs： 1vim -p txt1 txt2 txt3 多个tabs的好处是，你可以让第一个vim页面布局水平显示2个窗口，第二个vim页面布局垂直显示3个窗口。 三维移动如果把windows比喻是x-y轴，buffer比喻是z轴，光标在x-y轴上下左右移动，在z轴前后移动，整体构成一种三维移动感。 适合自己的工作流程 先用buffer存储所有可能需要修改的文件。Vim就算打开很多buffer，始终只会看到1个buffer（假设只有1个window），这样可以集中注意力，也能快速切换buffer。 当对比文档、读文档、追踪代码流的时候，保持屏幕不操过3个window。 使用tmux工具来代替tabs","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"}]},{"title":"Vim-note-01","slug":"vim-note-01","date":"2022-05-09T02:02:50.000Z","updated":"2022-05-11T16:36:05.220Z","comments":true,"path":"2022/05/09/vim-note-01/","link":"","permalink":"http://example.com/2022/05/09/vim-note-01/","excerpt":"","text":"第1章 起步参数123vim --version #查看vim版本vim +%s/abc/def/g number.txt #打开number.txt,并立即把abc替换成defvim -c %s/abc/def/gnumber.txt #同上 同时打开多个窗口使用字母o和O选项打开后分别显示水平和垂直分割的窗口 12vim -o2 txt1 txt2 #水平分割vim -O3 txt1 txt2 txt3 #垂直分割 挂起同执行shell命令一样，按组合键Ctrl-z挂起，也可以用:stop或:suspend查看哪些挂起任务,则用jobs命令查看后台任务列表fg命令从后台挂起状态返回前台，默认返回+状态的挂起任务，可以用fg %3来指定回到任务3 聪明启动vim1ls -l | vim - #通过管道，把内容输出到新建的vim文件中。 后面必须加一个减号。再用:w name 保存文件名。","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"}]},{"title":"Everyday in MAY","slug":"everyday-in-may","date":"2022-05-06T16:40:26.000Z","updated":"2022-05-12T16:08:19.253Z","comments":true,"path":"2022/05/07/everyday-in-may/","link":"","permalink":"http://example.com/2022/05/07/everyday-in-may/","excerpt":"","text":"休息够了，加油吧！ 5-1 5-2 5-3 5-4 5-5 5-6 🍅🍅🍅 linux 文件系统 5-7 🍅 podman 5-8 🍅🍅🍅 video 5-9 🍅🍅🍅🍅 用户组管理回顾，ansible重头再看 5-10 🍅 ansible架构 5-11 🍅🍅🍅🍅 rh294学习环境搭建 5-12 🍅🍅 ansible安装 5-13 5-14 5-15 5-16 5-17 5-18 5-19","categories":[],"tags":[{"name":"打卡","slug":"打卡","permalink":"http://example.com/tags/%E6%89%93%E5%8D%A1/"}]},{"title":"Vim-note-00","slug":"vim-note-00","date":"2022-05-04T08:11:39.000Z","updated":"2022-05-11T17:46:37.484Z","comments":true,"path":"2022/05/04/vim-note-00/","link":"","permalink":"http://example.com/2022/05/04/vim-note-00/","excerpt":"","text":"学习连接 https://github.com/wsdjeg/Learn-Vim_zh_cn 第0章 请先阅读 本章提到vimtutot是一个很好的学习途径。这个命令可以打开一个vim教学指南，我从头学过一遍，知道了可以使用:!在不退出vim的情况下运行shell命令，推荐大家都使用一次 还提到Vimscript脚本语言，“您当然可以继续使用Vim而不了解任何Vimscript知识，但了解它可以使您更加擅长Vim。” 锻炼肌肉记忆，在实践中探索，能够本能、自然地使用命令。 作者提前说明，在本教程中对于经常使用的命令使用简写，对于不经常使用的命令使用全程。:join可以简写成:j vimrc选项，可以看作一个配置文件，需要:source %使其生效。它会使vim配置永久生效，而不是临时生效。这个跟我最近刚知道的ssh_config配置文件相似，感觉是个好东西。 123456#这里收集一些自用的vimrc文件配置set nocompatible #开启所有vim扩展set number #开启行号set hidden #开启缓冲区快速切换，见vim-note-02syntax on #开启语法高亮 如果启用compatible选项，许多Vim特有的功能将会被禁止，所以在vimrc文件中添加set nocompatible","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-04-30T17:48:54.313Z","updated":"2022-05-11T16:36:07.434Z","comments":true,"path":"2022/05/01/hello-world/","link":"","permalink":"http://example.com/2022/05/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"},{"name":"打卡","slug":"打卡","permalink":"http://example.com/tags/%E6%89%93%E5%8D%A1/"}]}