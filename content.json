{"meta":{"title":"阿珂","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Everyday-in-JUN","slug":"everyday-in-jun","date":"2022-06-01T00:06:57.000Z","updated":"2022-06-01T23:58:43.656Z","comments":true,"path":"2022/06/01/everyday-in-jun/","link":"","permalink":"http://example.com/2022/06/01/everyday-in-jun/","excerpt":"","text":"一旦你学会放弃，你就会习惯性的放弃。–文斯·兰巴迪 Vince Limbardi 6-1 🍅🍅 早起 ansible 变量及规则 6-2 🍅🍅 早起 ansible 变量优先级和 vars_files 的应用","categories":[],"tags":[{"name":"打卡","slug":"打卡","permalink":"http://example.com/tags/%E6%89%93%E5%8D%A1/"}]},{"title":"Ansible-note-03","slug":"ansible-note-03","date":"2022-05-19T13:53:10.000Z","updated":"2022-05-19T16:16:06.072Z","comments":true,"path":"2022/05/19/ansible-note-03/","link":"","permalink":"http://example.com/2022/05/19/ansible-note-03/","excerpt":"","text":"1、理解 Playbook如果说 adhoc 运行一个 task 任务，那么 Playbook 则可以运行多个 task任务。 Playbook 可以包含多个 play 项目，每个 play 项目可以有多个 task 任务。 可以把 Playbook 当成一个精心准备的剧本，每个 play 就是一个个剧集，每个 task 就是一个个情节。 2、Playbook 格式Playbook 是以 YAML 格式编写的文本文件，通常使用扩展名 yml 保存，Playbook 使用空格字符缩进来表示其数据结构。YAML 对于缩进的空格数量没有严格的要求，但有两个基本的规则： 处于层次结构中同一级别的数据元素（例如同一列表中的项目）必须具有相同的缩进量。 如果项目属于其他项目的子项，其缩进量必须大于父项。 Playbook 开头有三个破折号（—）组成，这是文档开始标记。结尾使用三个圆点（…）作为文档借宿标记，尽管在实践中这通常会省略。在两个标记之间，会以一个play列表的形式来定义 Playbook。 Playbook 结构： 1234567891011121314--- # 文档开始标记- A # play 项目1 - a # task 任务模块1 - b # task 任务模块2 - c - B # play 项目2 - a - b - c- C # play 项目3 - a - b - c... # 文档结束标记，可忽略 简单示例写法： 123456789--- #文档开始标记- name: ababab # 一个 play 项目 A，可选，但最好有，用于命名 play，帮助记录用途 hosts: servera.lab.example.com # 指定 play 项目中运行的主机或主机组，对应 inventory tasks: # 指定 play 项目运行的任务模块 - name: newbie # 可选，但最好有，用于命名 task，帮助记录用途 user: # 一个 task 任务模块，通常包含参数子项 uid: 4000 state: present Playbook 中的 play 和 task 列出的顺序很重要，因为 Ansible 会按照顺序运行它。 3、运行 Playbookansible-playbook 命令 12ansible-playbook --syntax-check test.yml #验证 playbook 语法ansible-playbook test.yml #运行 playbook 4、执行空运行使用 -C 参数 1ansible-playbook -C test.yml #空运行，仅报告直接结果，不会产生实际更改","categories":[],"tags":[{"name":"Ansible","slug":"Ansible","permalink":"http://example.com/tags/Ansible/"}]},{"title":"Ansible-note-02","slug":"ansible-note-02","date":"2022-05-15T15:24:31.000Z","updated":"2022-05-15T16:28:28.522Z","comments":true,"path":"2022/05/15/ansible-note-02/","link":"","permalink":"http://example.com/2022/05/15/ansible-note-02/","excerpt":"","text":"第 2 章 部署 AnsibleAnsible 配置文件4 种配置文件优先级Ansible 配置文件按优先级匹配，匹配后会忽视其余配置： 变量指定，优先级别最高，不推荐，不常用。 1export ANSIBLE=CONFIG=/tmp/ansible.cfg 工作目录配置文件，您当前执行命令的文件夹， pwd 查看，第二优先级，推荐，常用。 家目录配置文件，第三优先级，备用目录 默认配置文件，/etc/ansible/ansible.cfg，一般不使用 常规 ansible 配置配置示例 1234567891011121314151617[defaults]#指定清单文件的位置inventory = ./inventory#要在受管理主机上登陆的用户名，如果未指定，则使用当前用户名remote_user = username#是否提示输入SSH密码，如果使用SSH公钥验证，则可以是falseask_pass = false[privilege_escalation]#连接后是否自动在受管理主机上切换用户（通常切换为root），这也可以通过play来指定become = true#如何切换用户（通常为sudo，这也是默认设置，但也可选择su）becom_method = sudo#要在受管主机上切换的用户（通常为root，也是默认值）becom_user = root#是否要为become_method提示输入密码，默认为falsebecom_ask_pass = false Ansible 管理清单文件 inventory 文件就是简单文本，使用 ini 格式记录受控主机清单（文件名不是必须 inventory ）。 inventory 文件可以使用简单范围语法 [START:END] 来指定字母或者数字的范围。 inventory 文件可以在 ansible.cfg 定义位置，也可以使用 -i 参数指定。 123456789101112131415161718192021192.168.1.2 #可以直接写ip地址servera #也可以直接写主机名[myself] #定义组名，不能包含空格localhost #包含的主机[intranetweb] servera serverb[internetweb]servercserverd[test]server[b:d] #指serverb、serverc、serverd[web:children] #定义嵌套组，必须以:children结尾intranetweb #嵌套的组名internetweb Ansible 命令行选项 配置文件指令 命令行选项 inventory -i remote_user -u become –become、-b become_method –become-method become_user –become-user become_ask_pass –ask-become-pass、-K Ansible adhoc adhoc 是概念性说法，指 ansible 命令行临时执行的方式，一般不需要特别保存这些执行的命令，都可以叫做adhoc，理解adhoc有助于理解后面 playbook。 adhoc 命令格式是： 1ansible host-pattern -m module [-a &#x27;module arguments&#x27;] [-i inventory] host-pattern 指主机或主机组名，在 inventory 里定义。 module 指 Ansible 管理模块，可以用 ansible-doc -l 查看所有可用模块，未指定时默认时command模块。 -a &#39;module arguments&#39; 指使用模块传递到受控主机的参数。 -i inventory 指定 inventory 文件，其余见命令行选项表。 -o 以单行格式显示 Ansible 临时命令的输出","categories":[],"tags":[{"name":"Ansible","slug":"Ansible","permalink":"http://example.com/tags/Ansible/"}]},{"title":"Command-quick-keys","slug":"command-quick-keys","date":"2022-05-14T15:21:04.000Z","updated":"2022-05-15T16:21:22.011Z","comments":true,"path":"2022/05/14/command-quick-keys/","link":"","permalink":"http://example.com/2022/05/14/command-quick-keys/","excerpt":"","text":"请在CLI字符界面输入一条命令: 1ls -l /home/user 这里： 123command是 ls选项是 -l参数是 /home/user 在 CLI 字符界面 ESC 快捷键组合: ESC+. 调用上次参数 123cp 然后按ESC+. #调用上次参数则会变成cp /home/user #这个快捷键可以避免我们重复输入较长参数 ESC+b 左移一个单词 ESC+f 右移一个单词 ESC+c 右侧单词转换成首字母大写 ESC+u 右侧单词转换成全部大写 ESC+r 右侧单词转换成全部小写 ESC+t 左右两侧单词对换位置","categories":[],"tags":[{"name":"keys","slug":"keys","permalink":"http://example.com/tags/keys/"}]},{"title":"Vim-note-03","slug":"vim-note-03","date":"2022-05-12T07:14:28.000Z","updated":"2022-05-16T16:04:58.705Z","comments":true,"path":"2022/05/12/vim-note-03/","link":"","permalink":"http://example.com/2022/05/12/vim-note-03/","excerpt":"","text":"第 3 章 打开和搜索文件如何在 Vim 中快速搜索？ 不依赖插件搜索 使用fzf插件搜索 打开和编辑文件要在 Vim 中打开一个文件，可以使用 :edit 1:edit file.txt 如果文件存在，就会打开，如果不存在就会创建一个新的 buffer 名为 file.txt。 :edit 支持Tab补全、通配符及递归搜索，也可以指定目录，列出目录所有文件。 使用 find 命令搜索文件可以使用 :find 命令搜索文件，比如： 12:find file.txt:find app/controllers/users_controller.rb :find 命令也支持命令补全。 Find 和 Path两者的区别在于，:find命令根据 path 选项配置的路径查找文件，而 :edit 不会。 1:set path? 默认情况下，您的 path 内容很可能是这样的： 1path=.,/usr/include,, . 意思是在当前文件所在目录下搜索。(译者注：注意不是命令行输入pwd返回的当前目录，而是 当前所打开的文件 所在的目录) , means to search in the current directory. (译者注：此处貌似作者有点小错误，逗号,应该是表示路径之间的分割符。连续的两个,,（两个逗号之间为空）才表示当前目录) /usr/include 表示在C编译器头文件目录下搜索，可以忽略不设置。 可以将 set path+=&#123;您需要添加的目录&#125;添加到您的 vimrc 文件中，这样 find 就能搜索设置的目录。 使用grep命令在文件中搜索**在 Vim 内部**查找文件中内容的方法， Vim 提供两种： 内部 grep ， :vim 外部 grep ， :grep :vim 有以下语法： 123:vim /pattern/ file #先导航到第一个结果:copen #再打开quickfix窗口查看所有搜索结果:q #退出 /pattern/ 是您要搜索的内容的正则表达式。 file 是文件参数。您可以传入多个参数。Vim将在文件中搜索所有匹配正则表达式的内容。类似于:find，您可以传入*和**通配符。 如果只搜索文件本身内部，大可直接 :/ 搜索即可，不必使用gre命令搜索。 :grep 有一下语法： 1:grep -R &quot;lunch&quot; filename #使用方法同终端 grep 命令一致 注意它遵循的是终端 grep 的语法&quot;pattern&quot;，它同样使用 ‘quickfix’ 来显示所有的匹配结果。 用 Netrw 浏览文件使用 Vim 打开一个目录就会进入 Netrw 界面。 在 Vim 内部，可以使用 :edit 目录 来打开 Netrw 界面。 个人觉得 Netrw 没什么便利性，一笔带过。","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-05-11T16:36:07.434Z","updated":"2022-05-11T16:36:07.434Z","comments":true,"path":"2022/05/12/hello-world/","link":"","permalink":"http://example.com/2022/05/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Vim-note-02","slug":"vim-note-02","date":"2022-05-10T06:17:08.000Z","updated":"2022-05-15T16:25:29.831Z","comments":true,"path":"2022/05/10/vim-note-02/","link":"","permalink":"http://example.com/2022/05/10/vim-note-02/","excerpt":"","text":"第 2 章 缓冲区（Buffers），窗口（Windows）和选项卡（Tabs）Buffers buffer 是一个内存中的一个空间，每当 vim 打开一个文件，该文件的数据就与一个 buffer 绑定，即，当您在 vim 中打开3个文件，就有3个 buffers 在~/.vimrc中添加set hidden 保存，然后激活它(在 vimrc 文件中运行 :source % )，可以在当前 buffer 未保存时切换到另一个 buffer，否则会提示保存错误 E37: No write since last change (add ! to override) 切换 buffer 有几种方法： :bnext 切换至下一个 buffer（:bprevious 切换至前一个 buffer），可用缩写 :bn :buffer + 文件名。（按下 &lt;Tab&gt; 键 Vim 会自动补全文件名）。 :buffer + n, n 是 buffer 的编号。比如，输入:buffer 2将使您切换到 buffer #2。 按下 Ctrl-O 将跳转至跳转列表中旧的位置，对应的，按下 Ctrl-I 将跳转至跳转列表中新的位置。这并不是属于 buffer 的特有方法，但它可以用来在不同的 buffers 中跳转。我将在第 5 章详细讲述关于跳转的知识。 按下 Ctrl-^ 跳转至先前编辑过的 buffer。 删除 buffer 可以输入 :bdelete。这条命令也可以接收一个 buffer 编号（:bdelete 3将删除 buffer #3）或一个文件名（:bdelete 然后按 &lt;Tab&gt; 自动补全文件名），感觉没什么用，使用 Ctrl-i/o 仍然可以切换出来。 退出 Vim如果有多个 buffer，可以使用 :qall、:qall!、:wqall，这跟 :wq 一样很好理解，测试 all 可以缩写成 a. Windows窗口、视图，及我们看到的 vim 界面。 在 vim 编辑界面，使用 :split filename 或者 :vsplit filename 、:new filename 可以在当前页面分割窗口，同时显示多个 buffer。这个最终的显示效果跟同时打开多个窗口是一样的。 12vim -o2 txt1 txt2 #水平分割vim -O3 txt1 txt2 txt3 #垂直分割 在分割的窗口之间切换编辑，可以使用 Ctrl-W 前缀键，再按 hjkl 切换左上下右。 在 vim 编辑界面，也可以直接创建新窗口： 1234Ctrl-W V 打开一个新的垂直分割的窗口Ctrl-W S 打开一个新的水平分割的窗口Ctrl-W C 关闭一个窗口Ctrl-W O 除了当前窗口，关闭所有其他的窗口 TabsTabs是windows的集合，就像窗口的布局，可以看成是浏览器的多标签（多个页面）。 在vim编辑界面，也可以直接创建新Tabs： 1234:tabnew file.txt #在tab中打开一个文件:tabclose #关闭当前tabgt #切换至下一个tabgT #切换至上一个tab 也可以直接打开多 Tabs： 1vim -p txt1 txt2 txt3 多个 tabs 的好处是，你可以让第一个 vim 页面布局水平显示 2 个窗口，第二个 vim 页面布局垂直显示 3 个窗口。 三维移动如果把 windows 比喻是 x-y 轴，buffer 比喻是 z 轴，光标在 x-y 轴上下左右移动，在 z 轴前后移动，整体构成一种三维移动感。 适合自己的工作流程 先用 buffer 存储所有可能需要修改的文件。 Vim 就算打开很多 buffer，始终只会看到 1 个 buffer（假设只有1个 window），这样可以集中注意力，也能快速切换 buffer。 当对比文档、读文档、追踪代码流的时候，保持屏幕不操过 3 个 window。 使用tmux工具来代替 tabs","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"}]},{"title":"Vim-note-01","slug":"vim-note-01","date":"2022-05-09T02:02:50.000Z","updated":"2022-05-15T16:25:33.863Z","comments":true,"path":"2022/05/09/vim-note-01/","link":"","permalink":"http://example.com/2022/05/09/vim-note-01/","excerpt":"","text":"第 1 章 起步参数123vim --version #查看vim版本vim +%s/abc/def/g number.txt #打开number.txt,并立即把abc替换成defvim -c %s/abc/def/gnumber.txt #同上 同时打开多个窗口使用字母 o 和 O 选项打开后分别显示水平和垂直分割的窗口 12vim -o2 txt1 txt2 #水平分割vim -O3 txt1 txt2 txt3 #垂直分割 挂起同执行 shell 命令一样，按组合键 Ctrl-z 挂起，也可以用 :stop 或 :suspend查看哪些挂起任务,则用 jobs 命令查看后台任务列表fg 命令从后台挂起状态返回前台，默认返回 + 状态的挂起任务，可以用 fg %3 来指定回到任务3 聪明启动 Vim1ls -l | vim - #通过管道，把内容输出到新建的vim文件中。 后面必须加一个减号。再用:w name 保存文件名。","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"}]},{"title":"Everyday in MAY","slug":"everyday-in-may","date":"2022-05-06T16:40:26.000Z","updated":"2022-06-01T00:32:52.144Z","comments":true,"path":"2022/05/07/everyday-in-may/","link":"","permalink":"http://example.com/2022/05/07/everyday-in-may/","excerpt":"","text":"休息够了，加油吧！ 5-1 5-2 5-3 5-4 5-5 5-6 🍅🍅🍅 linux 文件系统 5-7 🍅 podman 5-8 🍅🍅🍅 video 5-9 🍅🍅🍅🍅 用户组管理回顾，ansible 重头再看 5-10 🍅 ansible 架构 5-11 🍅🍅🍅🍅 rh294 学习环境搭建 5-12 🍅🍅 ansible 安装 5-13 5-14 🍅🍅🍅🍅🍅 ansible 配置及 inventory 5-15 🍅🍅🍅🍅🍅 ansible adhoc 5-16 🍅 vim grep 5-17 🍅🍅 git add branch 5-18 5-19 🍅🍅🍅🍅 理解ansible playbook 5-20 5-21 5-22 5-23 5-24 5-25 5-26 5-27 5-28 5-29 5-30 5-31 🍅🍅 早起 ansible-doc 获取模块使用说明","categories":[],"tags":[{"name":"打卡","slug":"打卡","permalink":"http://example.com/tags/%E6%89%93%E5%8D%A1/"}]},{"title":"Vim-note-00","slug":"vim-note-00","date":"2022-05-04T08:11:39.000Z","updated":"2022-05-15T16:25:36.696Z","comments":true,"path":"2022/05/04/vim-note-00/","link":"","permalink":"http://example.com/2022/05/04/vim-note-00/","excerpt":"","text":"学习连接 https://github.com/wsdjeg/Learn-Vim_zh_cn 第 0 章 请先阅读 本章提到 vimtutot 是一个很好的学习途径。这个命令可以打开一个 Vim 教学指南，我从头学过一遍，知道了可以使用:!在不退出 vim 的情况下运行shell命令，推荐大家都使用一次 还提到 Vimscript 脚本语言，“您当然可以继续使用 Vim 而不了解任何 Vimscript 知识，但了解它可以使您更加擅长Vim。” 锻炼肌肉记忆，在实践中探索，能够本能、自然地使用命令。 作者提前说明，在本教程中对于经常使用的命令使用简写，对于不经常使用的命令使用全程。:join可以简写成:j vimrc 选项，可以看作一个配置文件，需要:source %使其生效。它会使 vim 配置永久生效，而不是临时生效。这个跟我最近刚知道的 ssh_config 配置文件相似，感觉是个好东西。 123456#这里收集一些自用的vimrc文件配置set nocompatible #开启所有vim扩展set number #开启行号set hidden #开启缓冲区快速切换，见vim-note-02syntax on #开启语法高亮 如果启用compatible选项，许多Vim特有的功能将会被禁止，所以在vimrc文件中添加set nocompatible","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"}]}],"categories":[],"tags":[{"name":"打卡","slug":"打卡","permalink":"http://example.com/tags/%E6%89%93%E5%8D%A1/"},{"name":"Ansible","slug":"Ansible","permalink":"http://example.com/tags/Ansible/"},{"name":"keys","slug":"keys","permalink":"http://example.com/tags/keys/"},{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"}]}